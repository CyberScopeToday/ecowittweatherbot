import telebot
import requests
import json
import os
import csv
import io
import logging
from io import BytesIO
from tensorflow.keras.models import load_model
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import JobLookupError
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, timedelta
from telebot import types
from keras.callbacks import CSVLogger
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import seaborn as sns

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("training_logs.log"),  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

API_TOKEN = 'api from papa bot'
bot = telebot.TeleBot(API_TOKEN)

USER_DATA_FILE = 'user_data.json'
WEATHER_DATA_FILE = 'weather_data.csv'  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

scheduler = BackgroundScheduler()
scheduler.start()

print("–ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ —Ñ–∞–π–ª weather_data.csv")

############################################################–Ω–∞—á–∞–ª–æ —á–∞—Å—Ç–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏

def create_dataset(dataset, look_back=1):
    X, y = [], []
    for i in range(len(dataset) - look_back):
        X.append(dataset[i:(i + look_back), :])
        y.append(dataset[i + look_back, :])
    return np.array(X), np.array(y)


def train_lstm_model():
    import pandas as pd
    import numpy as np
    from sklearn.preprocessing import MinMaxScaler
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import LSTM, Dense, Input
    import os

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ LSTM.")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = pd.read_csv('weather_data.csv')
        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data.head()}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data['timestamp'] = pd.to_datetime(data['timestamp'])
        data.set_index('timestamp', inplace=True)
        data.ffill(inplace=True)
        data = data.resample('5min').mean()
        data.ffill(inplace=True)
        logger.debug("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(data.values)
        logger.debug(f"–†–∞–∑–º–µ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {scaled_data.shape}")
        dataset = scaled_data
        num_features = dataset.shape[1]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö
        look_back = 10
        train_size = int(len(dataset) * 0.8)
        train, _ = dataset[0:train_size], dataset[train_size:]
        X_train, y_train = create_dataset(train, look_back)
        logger.debug(f"–†–∞–∑–º–µ—Ä—ã X_train: {X_train.shape}, y_train: {y_train.shape}")
        logger.info("–î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = Sequential()
        model.add(Input(shape=(look_back, num_features)))
        model.add(LSTM(50))
        model.add(Dense(num_features))

        model.compile(loss='mean_squared_error', optimizer='adam')

        model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=1)
        logger.info("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ scaler
        model.save('lstm_model.keras')
        np.save('scaler.npy', scaler.scale_)
        np.save('scaler_min.npy', scaler.min_)
        logger.info("–ú–æ–¥–µ–ª—å –∏ scaler —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

def predict_with_lstm():
    import pandas as pd
    import numpy as np
    from sklearn.preprocessing import MinMaxScaler
    from tensorflow.keras.models import load_model

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = pd.read_csv('weather_data.csv')

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data['timestamp'] = pd.to_datetime(data['timestamp'])
    data.set_index('timestamp', inplace=True)
    data.ffill(inplace=True)
    data = data.resample('5min').mean()
    data.ffill(inplace=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ scaler
    scale_ = np.load('scaler.npy')
    min_ = np.load('scaler_min.npy')
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaler.scale_ = scale_
    scaler.min_ = min_
    scaler.data_min_ = data.values.min(axis=0)
    scaler.data_max_ = data.values.max(axis=0)
    scaler.data_range_ = scaler.data_max_ - scaler.data_min_

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    scaled_data = scaler.transform(data.values)
    dataset = scaled_data
    num_features = dataset.shape[1]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = load_model('lstm_model.keras') #('lstm_model.h5')
    model.compile(
    loss='mean_squared_error',
    optimizer='adam',
    metrics=['mean_absolute_error', 'mean_absolute_percentage_error']  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MAPE
)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    look_back = 10
    last_data = dataset[-look_back:]
    future_predict = []

    for i in range(24):
        last_data_reshaped = np.reshape(last_data, (1, look_back, num_features))
        next_pred = model.predict(last_data_reshaped)
        future_predict.append(next_pred[0])
        last_data = np.vstack([last_data[1:], next_pred])

    # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    future_predict_inverse = scaler.inverse_transform(np.array(future_predict))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    future_dates = pd.date_range(start=data.index[-1] + pd.Timedelta(minutes=5), periods=24, freq='5min')
    features = ['temperature', 'humidity', 'pressure']
    future_forecast_df = pd.DataFrame(future_predict_inverse, index=future_dates, columns=features)

    return future_forecast_df

train_lstm_model()

from apscheduler.triggers.cron import CronTrigger

scheduler.add_job(
    train_lstm_model,
    trigger=IntervalTrigger(hours=1),  # Trains the model every hour
    id='train_lstm_model',
    replace_existing=True
)

############################################################–∫–æ–Ω–µ—Ü —á–∞—Å—Ç–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        for chat_id, settings in data.items():
            if isinstance(settings, str):  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∞ (–≤—Ä–µ–º—è)
                data[chat_id] = {
                    'notification_time': settings,
                    'pressure_alert': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–≤–ª–µ–Ω–∏–∏
                    'comfort_alert': False,   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ
                    'recommendation_alert': False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                }
            else:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                settings.setdefault('pressure_alert', False)
                settings.setdefault('comfort_alert', False)
                settings.setdefault('recommendation_alert', False)
        return data
    else:
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f)

def get_weather_data():
    try:
        url = 'https://api.ecowitt.net/api/v3/device/real_time?application_key=E6065D116ED009F99AA9004DAF8718EF&api_key=7fe45b77-ed01-4679-be61-8d7b961474b0&mac=34:94:54:8C:F8:CA&call_back=all&temp_unitid=1&pressure_unitid=5&wind_speed_unitid=7&rainfall_unitid=12&solar_irradiance_unitid=16'
        response = requests.get(url)
        data = response.json()
        return data
    except Exception as e:
        print(f"Error while getting data: {e}")
        return None

def format_weather_data(data):
    outdoor = data['data']['outdoor']
    indoor = data['data']['indoor']
    wind = data['data']['wind']
    pressure = data['data']['pressure']
    rainfall = data['data']['rainfall']
    solar_and_uvi = data['data']['solar_and_uvi']
    
    message = f"""
üå°Ô∏è *–ü–æ–≥–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ*: {outdoor['temperature']['value']} {outdoor['temperature']['unit']}, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {outdoor['feels_like']['value']} {outdoor['feels_like']['unit']}
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {outdoor['humidity']['value']}{outdoor['humidity']['unit']} | –¢–æ—á–∫–∞ —Ä–æ—Å—ã: {outdoor['dew_point']['value']} {outdoor['dew_point']['unit']}

üè† *–í –ø–æ–º–µ—â–µ–Ω–∏–∏*: {indoor['temperature']['value']} {indoor['temperature']['unit']} | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {indoor['humidity']['value']}{indoor['humidity']['unit']}

üí® *–í–µ—Ç–µ—Ä*: {wind['wind_speed']['value']} {wind['wind_speed']['unit']} (–ø–æ—Ä—ã–≤—ã –¥–æ {wind['wind_gust']['value']} {wind['wind_gust']['unit']}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind['wind_direction']['value']}¬∞

üåßÔ∏è *–û—Å–∞–¥–∫–∏*: {rainfall['rain_rate']['value']} {rainfall['rain_rate']['unit']} | –°–µ–≥–æ–¥–Ω—è: {rainfall['daily']['value']} {rainfall['daily']['unit']}, –ú–µ—Å—è—Ü: {rainfall['monthly']['value']} {rainfall['monthly']['unit']}, –ì–æ–¥: {rainfall['yearly']['value']} {rainfall['yearly']['unit']}

üåû *–°–æ–ª–Ω—Ü–µ –∏ UV*: –†–∞–¥–∏–∞—Ü–∏—è {solar_and_uvi['solar']['value']} {solar_and_uvi['solar']['unit']} | UV: {solar_and_uvi['uvi']['value']}

üå™Ô∏è *–î–∞–≤–ª–µ–Ω–∏–µ*: –û—Ç–Ω. {pressure['relative']['value']} {pressure['relative']['unit']} | –ê–±—Å. {pressure['absolute']['value']} {pressure['absolute']['unit']}
"""
    return message


def generate_recommendations(data):
    try:
        outdoor = data['data']['outdoor']
        temperature = float(outdoor['temperature']['value'])
        humidity = float(outdoor['humidity']['value'])
        wind = data['data']['wind']
        wind_speed = float(wind['wind_speed']['value'])
        wind_unit = wind['wind_speed']['unit']
        solar_radiation = float(data['data']['solar_and_uvi']['solar']['value'])
        solar_unit = data['data']['solar_and_uvi']['solar']['unit']

        recommendations = ""

        # –°–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ
        if temperature < 0:
            recommendations += "üß• –ù–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ—Ç—å —Ç–µ–ø–ª—É—é –æ–¥–µ–∂–¥—É –∏ —à–∞–ø–∫—É.\n"
        elif 0 <= temperature < 10:
            recommendations += "üß£ –ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞. –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞—Ä—Ñ.\n"
        elif 10 <= temperature < 20:
            recommendations += "üëï –ü–æ–≥–æ–¥–∞ –ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä.\n"
        elif 20 <= temperature < 30:
            recommendations += "üëö –¢–µ–ø–ª–∞—è –ø–æ–≥–æ–¥–∞. –ú–æ–∂–Ω–æ –æ–¥–µ—Ç—å—Å—è –ø–æ–ª–µ–≥—á–µ.\n"
        elif temperature >= 30:
            recommendations += "ü©≥ –ñ–∞—Ä–∫–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å –≤ –ª–µ–≥–∫—É—é –∏ –¥—ã—à–∞—â—É—é –æ–¥–µ–∂–¥—É.\n"

        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
        if wind_speed > 10:
            recommendations += f"üå¨Ô∏è –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä ({wind_speed} {wind_unit}). –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ.\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if solar_radiation > 800:
            recommendations += f"üåû –í—ã—Å–æ–∫–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({solar_radiation} {solar_unit}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –¥–æ–ª–≥–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ.\n"

        if not recommendations:
            recommendations = "‚úÖ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∞—à–∏–º –¥–Ω–µ–º!"

        return recommendations

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."

def save_weather_data():
    data = get_weather_data()
    if data:
        try:
            outdoor = data['data']['outdoor']
            pressure = data['data']['pressure']
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            temperature = outdoor['temperature']['value']
            humidity = outdoor['humidity']['value']
            pressure_value = pressure['relative']['value']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            file_exists = os.path.isfile(WEATHER_DATA_FILE)

            with open(WEATHER_DATA_FILE, mode='a', newline='') as csv_file:
                fieldnames = ['timestamp', 'temperature', 'humidity', 'pressure']
                writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

                if not file_exists:
                    writer.writeheader()

                writer.writerow({
                    'timestamp': timestamp,
                    'temperature': temperature,
                    'humidity': humidity,
                    'pressure': pressure_value
                })
            print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: {timestamp}, {temperature}, {humidity}, {pressure_value}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


def send_scheduled_weather(chat_id):
    data = get_weather_data()
    if data:
        weather_message = format_weather_data(data)
        bot.send_message(chat_id, weather_message, parse_mode='Markdown', reply_markup=main_menu_inline(chat_id))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        check_and_send_comfort_alert(chat_id, data)
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.", reply_markup=main_menu_inline(chat_id))

def schedule_job(chat_id, user_time):
    job_id = f"weather_{chat_id}"
    try:
        scheduler.remove_job(job_id)
    except JobLookupError:
        pass

    hour, minute = map(int, user_time.split(':'))
    scheduler.add_job(
        send_scheduled_weather,
        'cron',
        args=[chat_id],
        hour=hour,
        minute=minute,
        id=job_id
    )

def initialize_jobs():
    user_data = load_user_data()
    for chat_id, settings in user_data.items():
        if isinstance(settings, dict) and 'notification_time' in settings:
            schedule_job(chat_id, settings['notification_time'])

initialize_jobs()

def main_menu_inline(chat_id):
    user_data = load_user_data()
    chat_id_str = str(chat_id)
    user_settings = user_data.get(chat_id_str, {})
    notification_time = user_settings.get('notification_time')
    pressure_alert = user_settings.get('pressure_alert', False)
    comfort_alert = user_settings.get('comfort_alert', False)
    recommendation_alert = user_settings.get('recommendation_alert', False)

    markup = types.InlineKeyboardMarkup()
    forecast_temp_button = types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data='forecast_temperature')
    forecast_humidity_button = types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", callback_data='forecast_humidity')
    forecast_pressure_button = types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –¥–∞–≤–ª–µ–Ω–∏—è", callback_data='forecast_pressure')

    weather_button = types.InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data='weather')
    history_button = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data='history')
    recommendation_button = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data='get_recommendation')

    if notification_time:
        set_time_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='toggle_notifications')
    else:
        set_time_button = types.InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data='toggle_notifications')

    if pressure_alert:
        pressure_button = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –¥–æ–∂–¥–µ", callback_data='toggle_pressure_alert')
    else:
        pressure_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ", callback_data='toggle_pressure_alert')

    if comfort_alert:
        comfort_button = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ", callback_data='toggle_comfort_alert')
    else:
        comfort_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ", callback_data='toggle_comfort_alert')

    if recommendation_alert:
        recommendation_alert_button = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", callback_data='toggle_recommendation_alert')
    else:
        recommendation_alert_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data='toggle_recommendation_alert')

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup.add(weather_button, history_button)
    markup.add(recommendation_button)
    markup.add(set_time_button)
    markup.add(pressure_button)
    markup.add(comfort_button)
    markup.add(recommendation_alert_button)
    markup.add(forecast_temp_button, forecast_humidity_button, forecast_pressure_button)

    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'forecast_temperature')
def callback_forecast_temperature(call):
    user = call.from_user
    print(f"User {user.first_name} (@{user.username}) requested temperature forecast.")
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast_df = predict_with_lstm()
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(12, 4))
        plt.plot(forecast_df.index, forecast_df['temperature'], label='–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', color='orange')
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 2 —á–∞—Å–∞')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        plt.legend()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        from io import BytesIO
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_photo(call.message.chat.id, buf, reply_markup=main_menu_inline(call.message.chat.id))
        buf.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.", reply_markup=main_menu_inline(call.message.chat.id))

@bot.callback_query_handler(func=lambda call: call.data == 'forecast_humidity')
def callback_forecast_humidity(call):
    user = call.from_user
    print(f"User {user.first_name} (@{user.username}) requested humidity forecast.")
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        forecast_df = predict_with_lstm()
        plt.figure(figsize=(12, 4))
        plt.plot(forecast_df.index, forecast_df['humidity'], label='–ü—Ä–æ–≥–Ω–æ–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', color='blue')
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞ 2 —á–∞—Å–∞')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–í–ª–∞–∂–Ω–æ—Å—Ç—å')
        plt.legend()
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        bot.send_photo(call.message.chat.id, buf, reply_markup=main_menu_inline(call.message.chat.id))
        buf.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: {e}")
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏.", reply_markup=main_menu_inline(call.message.chat.id))

@bot.callback_query_handler(func=lambda call: call.data == 'forecast_pressure')
def callback_forecast_pressure(call):
    user = call.from_user
    print(f"User {user.first_name} (@{user.username}) requested pressure forecast.")
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        forecast_df = predict_with_lstm()
        plt.figure(figsize=(12, 4))
        plt.plot(forecast_df.index, forecast_df['pressure'], label='–ü—Ä–æ–≥–Ω–æ–∑ –¥–∞–≤–ª–µ–Ω–∏—è', color='green')
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ 2 —á–∞—Å–∞')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–î–∞–≤–ª–µ–Ω–∏–µ')
        plt.legend()
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        bot.send_photo(call.message.chat.id, buf, reply_markup=main_menu_inline(call.message.chat.id))
        buf.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_menu_inline(call.message.chat.id))

@bot.callback_query_handler(func=lambda call: call.data == 'get_recommendation')
def callback_get_recommendation(call):
    data = get_weather_data()
    if data:
        recommendations = generate_recommendations(data)
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = call.from_user
            print(f"User {user.first_name} (@{user.username}) requested recommendations.")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                chat_id=call.message.chat.id,
                text=recommendations,
                reply_markup=main_menu_inline(call.message.chat.id)
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(
                chat_id=call.message.chat.id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                reply_markup=main_menu_inline(call.message.chat.id)
            )
    else:
        bot.send_message(
            chat_id=call.message.chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.",
            reply_markup=main_menu_inline(call.message.chat.id)
        )
@bot.callback_query_handler(func=lambda call: call.data == 'toggle_recommendation_alert')
def callback_toggle_recommendation_alert(call):
    chat_id = str(call.message.chat.id)
    user_data = load_user_data()
    if chat_id not in user_data or not isinstance(user_data[chat_id], dict):
        user_data[chat_id] = {}
    recommendation_alert = user_data[chat_id].get('recommendation_alert', False)

    if recommendation_alert:
        # Currently subscribed, unsubscribe
        user_data[chat_id]['recommendation_alert'] = False
        save_user_data(user_data)
        new_text = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    else:
        # Currently unsubscribed, subscribe
        user_data[chat_id]['recommendation_alert'] = True
        save_user_data(user_data)
        new_text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = call.from_user
        action = "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞" if user_data[chat_id]['recommendation_alert'] else "–æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç"
        print(f"User {user.first_name} (@{user.username}) {action} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id=call.message.chat.id,
            text=new_text,
            reply_markup=main_menu_inline(call.message.chat.id)
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'toggle_comfort_alert')
def callback_toggle_comfort_alert(call):
    chat_id = str(call.message.chat.id)
    user_data = load_user_data()
    if chat_id not in user_data or not isinstance(user_data[chat_id], dict):
        user_data[chat_id] = {}
    comfort_alert = user_data[chat_id].get('comfort_alert', False)

    if comfort_alert:
        # Currently subscribed, unsubscribe
        user_data[chat_id]['comfort_alert'] = False
        save_user_data(user_data)
        new_text = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ."
    else:
        # Currently unsubscribed, subscribe
        user_data[chat_id]['comfort_alert'] = True
        save_user_data(user_data)
        new_text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ."
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = call.from_user
        action = "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞" if user_data[chat_id]['comfort_alert'] else "–æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç"
        print(f"User {user.first_name} (@{user.username}) {action} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ.")
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id=call.message.chat.id,
            text=new_text,
            reply_markup=main_menu_inline(call.message.chat.id)
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'toggle_pressure_alert')
def callback_toggle_pressure_alert(call):
    chat_id = str(call.message.chat.id)
    user_data = load_user_data()
    if chat_id not in user_data or not isinstance(user_data[chat_id], dict):
        user_data[chat_id] = {}
    pressure_alert = user_data[chat_id].get('pressure_alert', False)

    if pressure_alert:
        # Currently subscribed, unsubscribe
        user_data[chat_id]['pressure_alert'] = False
        save_user_data(user_data)
        new_text = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –¥–æ–∂–¥–µ."
    else:
        # Currently unsubscribed, subscribe
        user_data[chat_id]['pressure_alert'] = True
        save_user_data(user_data)
        new_text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –¥–æ–∂–¥–µ."
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = call.from_user
        action = "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞" if user_data[chat_id]['pressure_alert'] else "–æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç"
        print(f"User {user.first_name} (@{user.username}) {action} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id=call.message.chat.id,
            text=new_text,
            reply_markup=main_menu_inline(call.message.chat.id)
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'toggle_notifications')
def callback_toggle_notifications(call):
    chat_id = str(call.message.chat.id)
    user_data = load_user_data()
    if chat_id not in user_data or not isinstance(user_data[chat_id], dict):
        user_data[chat_id] = {}
    notification_time = user_data[chat_id].get('notification_time')

    if notification_time:
        # Notifications are set, cancel them
        del user_data[chat_id]['notification_time']
        save_user_data(user_data)
        job_id = f"weather_{chat_id}"
        try:
            scheduler.remove_job(job_id)
        except JobLookupError:
            pass
        new_text = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã."
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = call.from_user
            print(f"User {user.first_name} (@{user.username}) –æ—Ç–º–µ–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                chat_id=call.message.chat.id,
                text=new_text,
                reply_markup=main_menu_inline(call.message.chat.id)
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        # Notifications are not set, ask user to set time
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = call.from_user
            print(f"User {user.first_name} (@{user.username}) —Ö–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—Ä–µ–º–µ–Ω–∏
            msg = bot.send_message(
                chat_id=call.message.chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç). –ù–∞–ø—Ä–∏–º–µ—Ä, 09:00",
                reply_markup=None
            )
            bot.register_next_step_handler(msg, process_time_step)
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    print(f"User {user.first_name} (@{user.username}) started the bot.")
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_inline(message.chat.id)
    )

@bot.callback_query_handler(func=lambda call: call.data == 'weather')
def callback_weather(call):
    user = call.from_user
    print(f"User {user.first_name} (@{user.username}) requested weather.")
    data = get_weather_data()
    if data:
        weather_message = format_weather_data(data)
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                chat_id=call.message.chat.id,
                text=weather_message,
                parse_mode='Markdown',
                reply_markup=main_menu_inline(call.message.chat.id)
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            check_and_send_comfort_alert(call.message.chat.id, data)
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(
                chat_id=call.message.chat.id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.",
                reply_markup=main_menu_inline(call.message.chat.id)
            )
    else:
        bot.send_message(
            chat_id=call.message.chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.",
            reply_markup=main_menu_inline(call.message.chat.id)
        )

def process_time_step(message):
    try:
        user_time = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(user_time, '%H:%M')
        user_data = load_user_data()
        chat_id = str(message.chat.id)
        if chat_id not in user_data or not isinstance(user_data[chat_id], dict):
            user_data[chat_id] = {}
        user_data[chat_id]['notification_time'] = user_time
        save_user_data(user_data)
        schedule_job(chat_id, user_time)
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.from_user
        print(f"User {user.first_name} (@{user.username}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ {user_time}.")
        bot.send_message(
            message.chat.id,
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {user_time} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
            reply_markup=main_menu_inline(message.chat.id)
        )
    except ValueError:
        msg = bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM."
        )
        bot.register_next_step_handler(msg, process_time_step)

@bot.callback_query_handler(func=lambda call: call.data == 'history')
def callback_history(call):
    user = call.from_user
    print(f"User {user.first_name} (@{user.username}) requested history.")
    data = get_history_data()
    if data:
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            generate_and_send_history_graph(call.message.chat.id, data, reply_markup=main_menu_inline(call.message.chat.id))
        except Exception as e:
            print(f"Error while processing history data: {e}")
            bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=main_menu_inline(call.message.chat.id))
    else:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=main_menu_inline(call.message.chat.id))

def make_patch_spines_invisible(ax):
    ax.set_frame_on(True)
    ax.patch.set_visible(False)
    for spine in ax.spines.values():
        spine.set_visible(False)

def get_history_data():
    try:
        application_key = 'E6065D116ED009F99AA9004DAF8718EF'
        api_key = '7fe45b77-ed01-4679-be61-8d7b961474b0'
        mac = '34:94:54:8C:F8:CA'
        temp_unitid = '1'
        pressure_unitid = '5'
        wind_speed_unitid = '7'
        rainfall_unitid = '12'
        solar_irradiance_unitid = '16'

        # Set start_date and end_date with time included
        start_date = datetime.now().strftime('%Y-%m-%d 00:00:00')
        end_date = datetime.now().strftime('%Y-%m-%d 23:59:59')

        # Use a valid cycle_type
        cycle_type = '5min'  # Or 'auto', '30min', '4hour', '1day'
        call_back = 'outdoor.temperature,outdoor.humidity,pressure.relative' # Specify required data

        url = 'https://api.ecowitt.net/api/v3/device/history'

        params = {
            'application_key': application_key,
            'api_key': api_key,
            'mac': mac,
            'start_date': start_date,
            'end_date': end_date,
            'cycle_type': cycle_type,
            'call_back': call_back,
            'temp_unitid': temp_unitid,
            'pressure_unitid': pressure_unitid,
            'wind_speed_unitid': wind_speed_unitid,
            'rainfall_unitid': rainfall_unitid,
            'solar_irradiance_unitid': solar_irradiance_unitid,
        }

        response = requests.get(url, params=params)
        data = response.json()
        return data
    except Exception as e:
        print(f"Error while getting history data: {e}")
        return None

def generate_and_send_history_graph(chat_id, data, reply_markup=None):
    try:
        import matplotlib.pyplot as plt
        import matplotlib.dates as mdates
        from io import BytesIO
        import numpy as np
        import seaborn as sns

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if ('data' not in data or
            'outdoor' not in data['data'] or
            'temperature' not in data['data']['outdoor'] or
            'humidity' not in data['data']['outdoor'] or
            'pressure' not in data['data'] or
            'relative' not in data['data']['pressure'] or
            'list' not in data['data']['outdoor']['temperature'] or
            'list' not in data['data']['outdoor']['humidity'] or
            'list' not in data['data']['pressure']['relative']):
            bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=reply_markup)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        temp_data = data['data']['outdoor']['temperature']
        temp_unit = temp_data['unit']
        temp_list = temp_data['list']

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        humidity_data = data['data']['outdoor']['humidity']
        humidity_unit = humidity_data['unit']
        humidity_list = humidity_data['list']

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏
        pressure_data = data['data']['pressure']['relative']
        pressure_unit = pressure_data['unit']
        pressure_list = pressure_data['list']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
        timestamps = []
        temperatures = []
        humidities = []
        pressures = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for timestamp_str in temp_list.keys():
            timestamp = datetime.fromtimestamp(int(timestamp_str))

            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            temperature = float(temp_list[timestamp_str])

            # –í–ª–∞–∂–Ω–æ—Å—Ç—å
            if timestamp_str in humidity_list:
                humidity = float(humidity_list[timestamp_str])
            else:
                humidity = np.nan  # –ò—Å–ø–æ–ª—å–∑—É–µ–º np.nan –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π

            # –î–∞–≤–ª–µ–Ω–∏–µ
            if timestamp_str in pressure_list:
                pressure = float(pressure_list[timestamp_str])
            else:
                pressure = np.nan  # –ò—Å–ø–æ–ª—å–∑—É–µ–º np.nan –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π

            timestamps.append(timestamp)
            temperatures.append(temperature)
            humidities.append(humidity)
            pressures.append(pressure)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_data = sorted(zip(timestamps, temperatures, humidities, pressures))
        timestamps, temperatures, humidities, pressures = zip(*sorted_data)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å Seaborn
        sns.set_theme(style="darkgrid")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
        fig, axes = plt.subplots(3, 1, figsize=(12, 10), sharex=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        sns.lineplot(x=timestamps, y=temperatures, ax=axes[0], color='tab:red')
        axes[0].set_ylabel(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp_unit})", fontsize=12, color='tab:red')
        axes[0].tick_params(axis='y', labelcolor='tab:red')
        axes[0].set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', fontsize=14)
        axes[0].grid(True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        sns.lineplot(x=timestamps, y=humidities, ax=axes[1], color='tab:blue')
        axes[1].set_ylabel(f"–í–ª–∞–∂–Ω–æ—Å—Ç—å ({humidity_unit})", fontsize=12, color='tab:blue')
        axes[1].tick_params(axis='y', labelcolor='tab:blue')
        axes[1].set_title('–í–ª–∞–∂–Ω–æ—Å—Ç—å', fontsize=14)
        axes[1].grid(True)

        # –ì—Ä–∞—Ñ–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è
        sns.lineplot(x=timestamps, y=pressures, ax=axes[2], color='tab:green')
        axes[2].set_ylabel(f"–î–∞–≤–ª–µ–Ω–∏–µ ({pressure_unit})", fontsize=12, color='tab:green')
        axes[2].tick_params(axis='y', labelcolor='tab:green')
        axes[2].set_title('–î–∞–≤–ª–µ–Ω–∏–µ', fontsize=14)
        axes[2].grid(True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ X (–≤—Ä–µ–º–µ–Ω–∏)
        axes[2].set_xlabel('–í—Ä–µ–º—è', fontsize=12)
        axes[2].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        fig.autofmt_xdate()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —Ñ–∏–≥—É—Ä—ã
        fig.suptitle('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã', fontsize=16)

        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close(fig)

        bot.send_photo(chat_id, buf, reply_markup=reply_markup)
        buf.close()
    except Exception as e:
        print(f"Error while generating the graph: {e}")
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=reply_markup)

def get_history_data_for_pressure():
    try:
        application_key = 'E6065D116ED009F99AA9004DAF8718EF'
        api_key = '7fe45b77-ed01-4679-be61-8d7b961474b0'
        mac = '34:94:54:8C:F8:CA'
        pressure_unitid = '5'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=3)
        start_date = start_time.strftime('%Y-%m-%d %H:%M:%S')
        end_date = end_time.strftime('%Y-%m-%d %H:%M:%S')

        cycle_type = '5min'  # –ò–ª–∏ 'auto', '30min', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        call_back = 'pressure.relative'  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏

        url = 'https://api.ecowitt.net/api/v3/device/history'

        params = {
            'application_key': application_key,
            'api_key': api_key,
            'mac': mac,
            'start_date': start_date,
            'end_date': end_date,
            'cycle_type': cycle_type,
            'call_back': call_back,
            'pressure_unitid': pressure_unitid,
        }

        response = requests.get(url, params=params)
        data = response.json()
        if data.get('code') == 0:
            return data
        else:
            print(f"API Error: {data.get('msg')}")
            return None
    except Exception as e:
        print(f"Error while getting pressure history data: {e}")
        return None

def calculate_pressure_change(data):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if ('data' not in data or
            'pressure' not in data['data'] or
            'relative' not in data['data']['pressure'] or
            'list' not in data['data']['pressure']['relative']):
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è.")
            return None

        pressure_data = data['data']['pressure']['relative']
        pressure_unit = pressure_data['unit']
        pressure_list = pressure_data['list']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
        timestamps = []
        pressures = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for timestamp_str, pressure_value in pressure_list.items():
            timestamp = datetime.fromtimestamp(int(timestamp_str))
            pressure = float(pressure_value)
            timestamps.append(timestamp)
            pressures.append(pressure)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_data = sorted(zip(timestamps, pressures))
        timestamps, pressures = zip(*sorted_data)

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
        pressure_change = pressures[-1] - pressures[0]
        return pressure_change
    except Exception as e:
        print(f"Error while calculating pressure change: {e}")
        return None

def analyze_pressure_trend():
    data = get_history_data_for_pressure()
    if data:
        pressure_change = calculate_pressure_change(data)
        if pressure_change is not None:
            # –ó–∞–¥–∞–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞–¥–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
            threshold = -1.5  # –ù–∞–ø—Ä–∏–º–µ—Ä, -1.5 –º–º —Ä—Ç. —Å—Ç. –∑–∞ 3 —á–∞—Å–∞
            if pressure_change <= threshold:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                user_data = load_user_data()
                for chat_id, settings in user_data.items():
                    if isinstance(settings, dict) and settings.get('pressure_alert', False):
                        bot.send_message(
                            chat_id=int(chat_id),
                            text="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                        )
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è.")

def calculate_heat_index(temperature_c, humidity):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥—Ä–∞–¥—É—Å—ã –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞
    temperature_f = temperature_c * 9/5 + 32
    if temperature_f >= 80:
        # –§–æ—Ä–º—É–ª–∞ Heat Index
        hi = -42.379 + 2.04901523*temperature_f + 10.14333127*humidity \
             - 0.22475541*temperature_f*humidity - 0.00683783*temperature_f**2 \
             - 0.05481717*humidity**2 + 0.00122874*temperature_f**2*humidity \
             + 0.00085282*temperature_f*humidity**2 - 0.00000199*temperature_f**2*humidity**2
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
        heat_index_c = (hi - 32) * 5/9
        return heat_index_c
    else:
        return temperature_c  # –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ 80¬∞F, Heat Index –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è

def calculate_wind_chill(temperature_c, wind_speed_kmh):
    # Wind Chill –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –Ω–∏–∂–µ 10¬∞C –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –≤—ã—à–µ 4.8 –∫–º/—á
    if temperature_c <= 10 and wind_speed_kmh > 4.8:
        wc = 13.12 + 0.6215*temperature_c - 11.37*(wind_speed_kmh**0.16) + 0.3965*temperature_c*(wind_speed_kmh**0.16)
        return wc
    else:
        return temperature_c  # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É

def check_and_send_comfort_alert(chat_id, data):
    user_data = load_user_data()
    chat_id_str = str(chat_id)
    user_settings = user_data.get(chat_id_str, {})
    comfort_alert = user_settings.get('comfort_alert', False)

    if not comfort_alert:
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ

    try:
        outdoor = data['data']['outdoor']
        temperature = float(outdoor['temperature']['value'])
        humidity = float(outdoor['humidity']['value'])
        wind = data['data']['wind']
        wind_speed = float(wind['wind_speed']['value'])

        heat_index = calculate_heat_index(temperature, humidity)
        wind_chill = calculate_wind_chill(temperature, wind_speed)

        alert_message = ""
        if heat_index > 32:  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø–∞—Å–Ω–æ–π –∂–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 32¬∞C)
            alert_message += f"üî• –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—Å–æ–∫–∏–π –∏–Ω–¥–µ–∫—Å –∂–∞—Ä—ã: {heat_index:.1f}¬∞C. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞.\n"
        if wind_chill < 5:  # –ü–æ—Ä–æ–≥ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -10¬∞C)
            alert_message += f"‚ùÑÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤–µ—Ç—Ä–æ–º: {wind_chill:.1f}¬∞C. –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.\n"

        if alert_message:
            bot.send_message(chat_id, alert_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞
def analyze_comfort_index():
    data = get_weather_data()
    if data:
        user_data = load_user_data()
        for chat_id, settings in user_data.items():
            if isinstance(settings, dict) and settings.get('comfort_alert', False):
                check_and_send_comfort_alert(int(chat_id), data)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞.")

def send_recommendations_to_subscribed_users():
    current_hour = datetime.now().hour
    if 8 <= current_hour < 22:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–∂–¥—É 8:00 –∏ 22:00
        data = get_weather_data()
        if data:
            recommendations = generate_recommendations(data)
            user_data = load_user_data()
            for chat_id, settings in user_data.items():
                if isinstance(settings, dict) and settings.get('recommendation_alert', False):
                    try:
                        bot.send_message(
                            chat_id=int(chat_id),
                            text=recommendations
                        )
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        print(f"Sent recommendations to user {chat_id}.")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    else:
        print("–ù–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è).")

scheduler.add_job(
    analyze_pressure_trend,
    trigger=IntervalTrigger(minutes=30),
    id='pressure_analysis',
    replace_existing=True
)

scheduler.add_job(
    analyze_comfort_index,
    trigger=IntervalTrigger(minutes=30),
    id='comfort_analysis',
    replace_existing=True
)

scheduler.add_job(
    send_recommendations_to_subscribed_users,
    trigger=IntervalTrigger(hours=1),
    id='recommendation_notifications',
    replace_existing=True
)

save_weather_data()

scheduler.add_job(
    save_weather_data,
    trigger=IntervalTrigger(minutes=5),  #–Ω—É–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    id='save_weather_data',
    replace_existing=True
)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

bot.infinity_polling(timeout=60, long_polling_timeout=60)
